{"ast":null,"code":"var _jsxFileName = \"/workspaces/Glocafe1/src/components/Home/CoffeePrices.js\";\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, ResponsiveContainer, YAxis, Tooltip, XAxis } from 'recharts';\n\nconst CustomTooltip = ({\n  active,\n  payload\n}) => {\n  if (active && payload && payload.length) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'transparent',\n        padding: '5px',\n        bottom: '20px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 13\n      }\n    }, payload[0].value.toFixed(2));\n  }\n\n  return null;\n};\n\nconst CommoditiesPrices = () => {\n  const [prices, setPrices] = useState({\n    COFFEE: null,\n    ROBUSTA: null\n  });\n  const [units, setUnits] = useState({\n    COFFEE: null,\n    ROBUSTA: null\n  });\n  const [coffeeChartData, setCoffeeChartData] = useState([]);\n  const [robustaChartData, setRobustaChartData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const divStyle = {\n    padding: '20px',\n    margin: '10px',\n    width: '200px',\n    background: 'rgba(0,255,133,0.35)',\n    boxShadow: '20px 20px 40px -6px rgba(0,0,0,0.2)',\n    backdropFilter: 'blur(10.5px)',\n    WebkitBackdropFilter: 'blur(10.5px)',\n    borderRadius: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexWrap: 'wrap'\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://commodities-api.com/api/latest?access_key=c4rq9ho37s9r4m7r7bd4jaw46b940amnq40h71wcj54cbfweprfm113awf4&base=USD&symbols=COFFEE,D00`);\n        const {\n          data\n        } = await response.json();\n        console.log(\"Latest Prices Response:\", data);\n\n        if (data && data.rates) {\n          setPrices({\n            COFFEE: data.rates.COFFEE,\n            ROBUSTA: data.rates.D00\n          });\n\n          if (data.unit) {\n            setUnits({\n              COFFEE: data.unit.COFFEE,\n              ROBUSTA: data.unit.D00\n            });\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching commodities data:\", error);\n      }\n    };\n\n    const fetchTimeSeries = async symbol => {\n      const currentDate = new Date();\n      const endDate = new Date(currentDate.setDate(currentDate.getDate() - 1)).toISOString().split('T')[0];\n      const startDate = new Date(currentDate.setDate(currentDate.getDate() - 20)).toISOString().split('T')[0];\n      const response = await fetch(`https://commodities-api.com/api/timeseries?access_key=c4rq9ho37s9r4m7r7bd4jaw46b940amnq40h71wcj54cbfweprfm113awf4&start_date=${startDate}&end_date=${endDate}&symbols=${symbol}`);\n      const data = await response.json();\n      console.log(`Raw API Response for ${symbol}:`, data);\n\n      if (data && data.data && data.data.rates) {\n        const ratesData = data.data.rates;\n        const mappedData = Object.entries(ratesData).map(([date, rates]) => ({\n          date,\n          rate: rates[symbol] ? 1 / rates[symbol] : null\n        }));\n        console.log(`Mapped data for ${symbol} before filtering:`, mappedData);\n        const transformedData = mappedData.filter(item => item.rate !== null);\n        console.log(`Final transformed data for ${symbol}:`, transformedData); // Additional log to see if any rate is null\n\n        const nullRates = mappedData.filter(item => item.rate === null);\n        console.log(`Entries with null rates for ${symbol}:`, nullRates);\n\n        if (symbol === 'COFFEE') {\n          setCoffeeChartData(transformedData);\n        } else {\n          setRobustaChartData(transformedData);\n        }\n      }\n\n      return data;\n    };\n\n    fetchData();\n    Promise.all([fetchTimeSeries('COFFEE'), fetchTimeSeries('D00')]).then(() => {\n      console.log(\"Chart Data State (Coffee): \", coffeeChartData);\n      console.log(\"Chart Data State (Robusta): \", robustaChartData);\n      setLoading(false);\n    });\n  }, []);\n  useEffect(() => {\n    console.log(\"Updated Chart Data State (Coffee): \", coffeeChartData);\n    console.log(\"Updated Chart Data State (Robusta): \", robustaChartData);\n  }, [coffeeChartData, robustaChartData]);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 16\n      }\n    }, \"Loading...\");\n  } // Determine the domain for Y-axis\n\n\n  const coffeeRates = coffeeChartData.map(item => item.rate);\n  const robustaRates = robustaChartData.map(item => item.rate);\n  const minCoffeeRate = Math.min(...coffeeRates);\n  const maxCoffeeRate = Math.max(...coffeeRates);\n  const minRobustaRate = Math.min(...robustaRates);\n  const maxRobustaRate = Math.max(...robustaRates);\n  const coffeeDomain = [minCoffeeRate * 0.95, maxCoffeeRate * 1.05];\n  const robustaDomain = [minRobustaRate * 0.95, maxRobustaRate * 1.05];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'white',\n      fontSize: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 17\n    }\n  }, \"Latest Price:\"), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'white',\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, \" ARABICA:\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 17\n    }\n  }, prices.COFFEE && (1 / prices.COFFEE).toFixed(2), \" \", units.COFFEE), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 80,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    width: 300,\n    height: 80,\n    data: coffeeChartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"rate\",\n    stroke: \"#8884d8\",\n    strokeWidth: 2,\n    dot: {\n      r: 0.5\n    },\n    activeDot: {\n      r: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    domain: coffeeDomain,\n    hide: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    hide: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    content: /*#__PURE__*/React.createElement(CustomTooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 43\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'white',\n      fontSize: '1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, \"Latest Price:\"), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'white',\n      fontWeight: 'bold'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 17\n    }\n  }, \" ROBUSTA:\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      color: 'black'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 17\n    }\n  }, prices.ROBUSTA && (1 / prices.ROBUSTA).toFixed(2), \" \", units.ROBUSTA), /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 80,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    width: 300,\n    height: 80,\n    data: robustaChartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"rate\",\n    stroke: \"#82ca9d\",\n    strokeWidth: 2,\n    dot: {\n      r: 0.5\n    },\n    activeDot: {\n      r: 4\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    domain: robustaDomain,\n    hide: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"date\",\n    hide: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    content: /*#__PURE__*/React.createElement(CustomTooltip, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 43\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default CommoditiesPrices;","map":{"version":3,"sources":["/workspaces/Glocafe1/src/components/Home/CoffeePrices.js"],"names":["React","useEffect","useState","LineChart","Line","ResponsiveContainer","YAxis","Tooltip","XAxis","CustomTooltip","active","payload","length","backgroundColor","padding","bottom","value","toFixed","CommoditiesPrices","prices","setPrices","COFFEE","ROBUSTA","units","setUnits","coffeeChartData","setCoffeeChartData","robustaChartData","setRobustaChartData","loading","setLoading","divStyle","margin","width","background","boxShadow","backdropFilter","WebkitBackdropFilter","borderRadius","display","flexDirection","alignItems","justifyContent","flexWrap","fetchData","response","fetch","data","json","console","log","rates","D00","unit","error","fetchTimeSeries","symbol","currentDate","Date","endDate","setDate","getDate","toISOString","split","startDate","ratesData","mappedData","Object","entries","map","date","rate","transformedData","filter","item","nullRates","Promise","all","then","coffeeRates","robustaRates","minCoffeeRate","Math","min","maxCoffeeRate","max","minRobustaRate","maxRobustaRate","coffeeDomain","robustaDomain","color","fontSize","fontWeight","r"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { LineChart, Line, ResponsiveContainer, YAxis, Tooltip, XAxis } from 'recharts';\n\nconst CustomTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n        return (\n            <div style={{ backgroundColor: 'transparent', padding: '5px', bottom: '20px' }}>\n                {payload[0].value.toFixed(2)}\n            </div>\n        );\n    }\n    return null;\n};\n\nconst CommoditiesPrices = () => {\n    const [prices, setPrices] = useState({ COFFEE: null, ROBUSTA: null });\n    const [units, setUnits] = useState({ COFFEE: null, ROBUSTA: null });\n    const [coffeeChartData, setCoffeeChartData] = useState([]);\n    const [robustaChartData, setRobustaChartData] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    const divStyle = {\n        padding: '20px',\n        margin: '10px',\n        width: '200px',\n        background: 'rgba(0,255,133,0.35)',\n        boxShadow: '20px 20px 40px -6px rgba(0,0,0,0.2)',\n        backdropFilter: 'blur(10.5px)',\n        WebkitBackdropFilter: 'blur(10.5px)',\n        borderRadius: '10px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center',\n        flexWrap: 'wrap',\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch(`https://commodities-api.com/api/latest?access_key=c4rq9ho37s9r4m7r7bd4jaw46b940amnq40h71wcj54cbfweprfm113awf4&base=USD&symbols=COFFEE,D00`);\n                const { data } = await response.json();\n\n                console.log(\"Latest Prices Response:\", data);\n\n                if (data && data.rates) {\n                    setPrices({ COFFEE: data.rates.COFFEE, ROBUSTA: data.rates.D00 });\n                    if (data.unit) {\n                        setUnits({ COFFEE: data.unit.COFFEE, ROBUSTA: data.unit.D00 });\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error fetching commodities data:\", error);\n            }\n        };\n\n        const fetchTimeSeries = async (symbol) => {\n            const currentDate = new Date();\n            const endDate = new Date(currentDate.setDate(currentDate.getDate() - 1)).toISOString().split('T')[0];\n            const startDate = new Date(currentDate.setDate(currentDate.getDate() - 20)).toISOString().split('T')[0];\n            \n            const response = await fetch(`https://commodities-api.com/api/timeseries?access_key=c4rq9ho37s9r4m7r7bd4jaw46b940amnq40h71wcj54cbfweprfm113awf4&start_date=${startDate}&end_date=${endDate}&symbols=${symbol}`);\n            const data = await response.json();\n\n            console.log(`Raw API Response for ${symbol}:`, data);\n\n            if (data && data.data && data.data.rates) {\n                const ratesData = data.data.rates;\n                const mappedData = Object.entries(ratesData).map(([date, rates]) => ({\n                    date,\n                    rate: rates[symbol] ? 1 / rates[symbol] : null\n                }));\n\n                console.log(`Mapped data for ${symbol} before filtering:`, mappedData);\n\n                const transformedData = mappedData.filter(item => item.rate !== null);\n                console.log(`Final transformed data for ${symbol}:`, transformedData);\n\n                // Additional log to see if any rate is null\n                const nullRates = mappedData.filter(item => item.rate === null);\n                console.log(`Entries with null rates for ${symbol}:`, nullRates);\n\n                if (symbol === 'COFFEE') {\n                    setCoffeeChartData(transformedData);\n                } else {\n                    setRobustaChartData(transformedData);\n                }\n            }\n            return data; \n        };\n\n        fetchData();\n\n        Promise.all([\n            fetchTimeSeries('COFFEE'),\n            fetchTimeSeries('D00')\n        ]).then(() => {\n            console.log(\"Chart Data State (Coffee): \", coffeeChartData);\n            console.log(\"Chart Data State (Robusta): \", robustaChartData);\n            setLoading(false);\n        });\n    }, []);\n\n    useEffect(() => {\n        console.log(\"Updated Chart Data State (Coffee): \", coffeeChartData);\n        console.log(\"Updated Chart Data State (Robusta): \", robustaChartData);\n    }, [coffeeChartData, robustaChartData]);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    // Determine the domain for Y-axis\n    const coffeeRates = coffeeChartData.map(item => item.rate);\n    const robustaRates = robustaChartData.map(item => item.rate);\n\n    const minCoffeeRate = Math.min(...coffeeRates);\n    const maxCoffeeRate = Math.max(...coffeeRates);\n\n    const minRobustaRate = Math.min(...robustaRates);\n    const maxRobustaRate = Math.max(...robustaRates);\n\n    const coffeeDomain = [minCoffeeRate * 0.95, maxCoffeeRate * 1.05];\n    const robustaDomain = [minRobustaRate * 0.95, maxRobustaRate * 1.05];\n\n    return (\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <div style={divStyle}>\n                <span style={{ color: 'white', fontSize:'1rem' }}>Latest Price:</span>\n                <span style={{ color: 'white', fontWeight: 'bold' }}> ARABICA:</span> \n                <br />\n                <span style={{ color: 'black' }}>\n                    {prices.COFFEE && (1 / prices.COFFEE).toFixed(2)} {units.COFFEE}\n                </span>\n                <ResponsiveContainer width=\"100%\" height={80}>\n                    <LineChart width={300} height={80} data={coffeeChartData}>\n                        <Line \n                            type=\"monotone\" \n                            dataKey=\"rate\" \n                            stroke=\"#8884d8\" \n                            strokeWidth={2} \n                            dot={{ r: 0.5 }} \n                            activeDot={{ r: 4 }}\n                        />\n                        <YAxis domain={coffeeDomain} hide={true} />\n                        <XAxis dataKey=\"date\" hide={true} />\n                        <Tooltip content={<CustomTooltip />} />\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n            <div style={divStyle}>\n                <span style={{ color: 'white', fontSize:'1rem' }}>Latest Price:</span>\n                <span style={{ color: 'white', fontWeight: 'bold' }}> ROBUSTA:</span>\n                <br />\n                <span style={{ color: 'black' }}>\n                    {prices.ROBUSTA && (1 / prices.ROBUSTA).toFixed(2)} {units.ROBUSTA}\n                </span>\n                <ResponsiveContainer width=\"100%\" height={80}>\n                    <LineChart width={300} height={80} data={robustaChartData}>\n                        <Line \n                            type=\"monotone\" \n                            dataKey=\"rate\" \n                            stroke=\"#82ca9d\" \n                            strokeWidth={2} \n                            dot={{ r: 0.5}} \n                            activeDot={{ r: 4 }}\n                        />\n                        <YAxis domain={robustaDomain} hide={true} />\n                        <XAxis dataKey=\"date\" hide={true} />\n                        <Tooltip content={<CustomTooltip />} />\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n        </div>\n    );\n    \n};\n\n\nexport default CommoditiesPrices;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/workspaces/Glocafe1/src/components/Home/CoffeePrices.js\";\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, ResponsiveContainer } from 'recharts';\n\nconst CommoditiesPrices = () => {\n  const [prices, setPrices] = useState({\n    COFFEE: null,\n    ROBUSTA: null\n  });\n  const [units, setUnits] = useState({\n    COFFEE: null,\n    ROBUSTA: null\n  });\n  const [chartData, setChartData] = useState([]);\n  const divStyle = {\n    padding: '20px',\n    margin: '10px',\n    width: '200px',\n    background: 'rgba(0,255,133,0.35)',\n    boxShadow: '20px 20px 40px -6px rgba(0,0,0,0.2)',\n    backdropFilter: 'blur(10.5px)',\n    WebkitBackdropFilter: 'blur(10.5px)',\n    borderRadius: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://commodities-api.com/api/latest?access_key=nc4rq9ho37s9r4m7r7bd4jaw46b940amnq40h71wcj54cbfweprfm113awf4&base=USD&symbols=COFFEE,ROBUSTA`);\n        const {\n          data\n        } = await response.json();\n        console.log(\"API Response:\", data);\n\n        if (data && data.rates) {\n          const coffeePrice = data.rates.COFFEE;\n          const robustaPrice = data.rates.ROBUSTA;\n          setPrices({\n            COFFEE: coffeePrice,\n            ROBUSTA: robustaPrice\n          }); // Setting units\n\n          if (data.unit) {\n            setUnits({\n              COFFEE: data.unit.COFFEE,\n              ROBUSTA: data.unit.ROBUSTA\n            });\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching commodities data:\", error);\n      }\n    };\n\n    fetchData();\n\n    const fetchTimeSeries = async () => {\n      const currentDate = new Date();\n      const endDate = currentDate.toISOString().split('T')[0];\n      const startDate = new Date(currentDate.setDate(currentDate.getDate() - 5)).toISOString().split('T')[0];\n      const response = await fetch(`https://commodities-api.com/api/timeseries?access_key=nc4rq9ho37s9r4m7r7bd4jaw46b940amnq40h71wcj54cbfweprfm113awf4&start_date=${startDate}&end_date=${endDate}&symbols=COFFEE,ROBUSTA`);\n      const data = await response.json();\n\n      if (data && data.rates) {\n        const transformedData = Object.entries(data.rates).map(([date, rates]) => ({\n          date,\n          COFFEE: 1 / rates.COFFEE,\n          ROBUSTA: 1 / rates.ROBUSTA\n        }));\n        setChartData(transformedData);\n      }\n    };\n\n    fetchTimeSeries();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Latest Price ARABICA:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }), prices.COFFEE && (1 / prices.COFFEE).toFixed(2), \" \", units.COFFEE, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"COFFEE\",\n    stroke: \"#8884d8\",\n    strokeWidth: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, \"Latest Price ROBUSTA:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }), prices.ROBUSTA && (1 / prices.ROBUSTA).toFixed(2), \" \", units.ROBUSTA, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    data: chartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"ROBUSTA\",\n    stroke: \"#82ca9d\",\n    strokeWidth: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  })))));\n};\n\nexport default CommoditiesPrices;","map":{"version":3,"sources":["/workspaces/Glocafe1/src/components/Home/CoffeePrices.js"],"names":["React","useEffect","useState","LineChart","Line","ResponsiveContainer","CommoditiesPrices","prices","setPrices","COFFEE","ROBUSTA","units","setUnits","chartData","setChartData","divStyle","padding","margin","width","background","boxShadow","backdropFilter","WebkitBackdropFilter","borderRadius","display","flexDirection","alignItems","justifyContent","fetchData","response","fetch","data","json","console","log","rates","coffeePrice","robustaPrice","unit","error","fetchTimeSeries","currentDate","Date","endDate","toISOString","split","startDate","setDate","getDate","transformedData","Object","entries","map","date","toFixed"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { LineChart, Line, ResponsiveContainer } from 'recharts';\n\nconst CommoditiesPrices = () => {\n    const [prices, setPrices] = useState({ COFFEE: null, ROBUSTA: null });\n    const [units, setUnits] = useState({ COFFEE: null, ROBUSTA: null });\n    const [chartData, setChartData] = useState([]);\n\n    const divStyle = {\n        padding: '20px',\n        margin: '10px',\n        width: '200px',\n        background: 'rgba(0,255,133,0.35)',\n        boxShadow: '20px 20px 40px -6px rgba(0,0,0,0.2)',\n        backdropFilter: 'blur(10.5px)',\n        WebkitBackdropFilter: 'blur(10.5px)',\n        borderRadius: '10px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch(`https://commodities-api.com/api/latest?access_key=nc4rq9ho37s9r4m7r7bd4jaw46b940amnq40h71wcj54cbfweprfm113awf4&base=USD&symbols=COFFEE,ROBUSTA`);\n                const { data } = await response.json();\n\n                console.log(\"API Response:\", data);\n\n                if (data && data.rates) {\n                    const coffeePrice = data.rates.COFFEE;\n                    const robustaPrice = data.rates.ROBUSTA;\n                    setPrices({ COFFEE: coffeePrice, ROBUSTA: robustaPrice });\n\n                    // Setting units\n                    if (data.unit) {\n                        setUnits({ COFFEE: data.unit.COFFEE, ROBUSTA: data.unit.ROBUSTA });\n                    }\n                }\n                \n            } catch (error) {\n                console.error(\"Error fetching commodities data:\", error);\n            }\n        };\n\n        fetchData();\n    \n\n    const fetchTimeSeries = async () => {\n        const currentDate = new Date();\n        const endDate = currentDate.toISOString().split('T')[0];\n        const startDate = new Date(currentDate.setDate(currentDate.getDate() - 5)).toISOString().split('T')[0];\n\n        const response = await fetch(`https://commodities-api.com/api/timeseries?access_key=nc4rq9ho37s9r4m7r7bd4jaw46b940amnq40h71wcj54cbfweprfm113awf4&start_date=${startDate}&end_date=${endDate}&symbols=COFFEE,ROBUSTA`);\n        const data = await response.json();\n\n        if (data && data.rates) {\n            const transformedData = Object.entries(data.rates).map(([date, rates]) => ({\n                date,\n                COFFEE: 1 / rates.COFFEE,\n                ROBUSTA: 1 / rates.ROBUSTA\n            }));\n            setChartData(transformedData);\n        }\n    };\n\n    fetchTimeSeries();\n}, []);\n\n\nreturn (\n    <div style={{ display: 'flex', justifyContent: 'center' }}>\n        <div style={divStyle}>\n            Latest Price ARABICA: \n            <br />\n            {prices.COFFEE && (1 / prices.COFFEE).toFixed(2)} {units.COFFEE}\n            <ResponsiveContainer width=\"100%\" height={100}>\n                <LineChart data={chartData}>\n                    <Line type=\"monotone\" dataKey=\"COFFEE\" stroke=\"#8884d8\" strokeWidth={2} />\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n        <div style={divStyle}>\n            Latest Price ROBUSTA: \n            <br />\n            {prices.ROBUSTA && (1 / prices.ROBUSTA).toFixed(2)} {units.ROBUSTA}\n            <ResponsiveContainer width=\"100%\" height={100}>\n                <LineChart data={chartData}>\n                    <Line type=\"monotone\" dataKey=\"ROBUSTA\" stroke=\"#82ca9d\" strokeWidth={2} />\n                </LineChart>\n            </ResponsiveContainer>\n        </div>\n    </div>\n);\n};\n\nexport default CommoditiesPrices;\n\n"]},"metadata":{},"sourceType":"module"}
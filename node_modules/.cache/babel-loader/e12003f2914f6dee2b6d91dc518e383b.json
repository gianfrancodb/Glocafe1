{"ast":null,"code":"var _jsxFileName = \"/workspaces/Glocafe1/src/components/Home/CoffeePrices.js\";\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, ResponsiveContainer } from 'recharts';\n\nconst CommoditiesPrices = () => {\n  const [prices, setPrices] = useState({\n    COFFEE: null,\n    ROBUSTA: null\n  });\n  const [units, setUnits] = useState({\n    COFFEE: null,\n    ROBUSTA: null\n  });\n  const [coffeeChartData, setCoffeeChartData] = useState([]);\n  const [robustaChartData, setRobustaChartData] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const divStyle = {\n    padding: '20px',\n    margin: '10px',\n    width: '200px',\n    background: 'rgba(0,255,133,0.35)',\n    boxShadow: '20px 20px 40px -6px rgba(0,0,0,0.2)',\n    backdropFilter: 'blur(10.5px)',\n    WebkitBackdropFilter: 'blur(10.5px)',\n    borderRadius: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://commodities-api.com/api/latest?access_key=nc4rq9ho37s9r4m7r7bd4jaw46b940amnq40h71wcj54cbfweprfm113awf4&base=USD&symbols=COFFEE,ROBUSTA`);\n        const {\n          data\n        } = await response.json();\n        console.log(\"Latest Prices Response:\", data);\n\n        if (data && data.rates) {\n          setPrices({\n            COFFEE: data.rates.COFFEE,\n            ROBUSTA: data.rates.ROBUSTA\n          });\n\n          if (data.unit) {\n            setUnits({\n              COFFEE: data.unit.COFFEE,\n              ROBUSTA: data.unit.ROBUSTA\n            });\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching commodities data:\", error);\n      }\n    };\n\n    fetchData();\n    Promise.all([Promise.all([fetchTimeSeries('COFFEE'), fetchTimeSeries('ROBUSTA').then(data => {\n      const robustaDataPoints = Object.entries(data.data.rates || {}).filter(([, rates]) => rates.ROBUSTA !== undefined);\n\n      if (robustaDataPoints.length < 2) {\n        return fetchTimeSeries('D00'); // Fallback for ROBUSTA\n      }\n    })])]).then(() => {\n      console.log(\"Chart Data State (Coffee): \", coffeeChartData);\n      console.log(\"Chart Data State (Robusta): \", robustaChartData);\n      setLoading(false);\n    });\n  }, []);\n  useEffect(() => {\n    console.log(\"Updated Chart Data State (Coffee): \", coffeeChartData);\n    console.log(\"Updated Chart Data State (Robusta): \", robustaChartData);\n  }, [coffeeChartData, robustaChartData]);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 16\n      }\n    }, \"Loading...\");\n  }\n\n  const logCoffeeChartData = () => console.log(\"Props data for COFFEE chart:\", coffeeChartData);\n\n  const logRobustaChartData = () => console.log(\"Props data for ROBUSTA chart:\", robustaChartData);\n\n  logCoffeeChartData();\n  logRobustaChartData();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, \"Latest Price ARABICA:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }), prices.COFFEE && (1 / prices.COFFEE).toFixed(2), \" \", units.COFFEE, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 80,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    width: 300,\n    height: 80,\n    dot: false,\n    data: coffeeChartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"rate\",\n    stroke: \"#8884d8\",\n    strokeWidth: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"Latest Price ROBUSTA:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }), prices.ROBUSTA && (1 / prices.ROBUSTA).toFixed(2), \" \", units.ROBUSTA, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 80,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    width: 300,\n    height: 80,\n    data: robustaChartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"rate\",\n    stroke: \"#82ca9d\",\n    strokeWidth: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default CommoditiesPrices;","map":{"version":3,"sources":["/workspaces/Glocafe1/src/components/Home/CoffeePrices.js"],"names":["React","useEffect","useState","LineChart","Line","ResponsiveContainer","CommoditiesPrices","prices","setPrices","COFFEE","ROBUSTA","units","setUnits","coffeeChartData","setCoffeeChartData","robustaChartData","setRobustaChartData","loading","setLoading","divStyle","padding","margin","width","background","boxShadow","backdropFilter","WebkitBackdropFilter","borderRadius","display","flexDirection","alignItems","justifyContent","fetchData","response","fetch","data","json","console","log","rates","unit","error","Promise","all","fetchTimeSeries","then","robustaDataPoints","Object","entries","filter","undefined","length","logCoffeeChartData","logRobustaChartData","toFixed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,SAAT,EAAoBC,IAApB,EAA0BC,mBAA1B,QAAqD,UAArD;;AAEA,MAAMC,iBAAiB,GAAG,MAAM;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC;AAAEO,IAAAA,MAAM,EAAE,IAAV;AAAgBC,IAAAA,OAAO,EAAE;AAAzB,GAAD,CAApC;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC;AAAEO,IAAAA,MAAM,EAAE,IAAV;AAAgBC,IAAAA,OAAO,EAAE;AAAzB,GAAD,CAAlC;AACA,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCZ,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACa,gBAAD,EAAmBC,mBAAnB,IAA0Cd,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBhB,QAAQ,CAAC,IAAD,CAAtC;AAEA,QAAMiB,QAAQ,GAAG;AACbC,IAAAA,OAAO,EAAE,MADI;AAEbC,IAAAA,MAAM,EAAE,MAFK;AAGbC,IAAAA,KAAK,EAAE,OAHM;AAIbC,IAAAA,UAAU,EAAE,sBAJC;AAKbC,IAAAA,SAAS,EAAE,qCALE;AAMbC,IAAAA,cAAc,EAAE,cANH;AAObC,IAAAA,oBAAoB,EAAE,cAPT;AAQbC,IAAAA,YAAY,EAAE,MARD;AASbC,IAAAA,OAAO,EAAE,MATI;AAUbC,IAAAA,aAAa,EAAE,QAVF;AAWbC,IAAAA,UAAU,EAAE,QAXC;AAYbC,IAAAA,cAAc,EAAE;AAZH,GAAjB;AAeA9B,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM+B,SAAS,GAAG,YAAY;AAC1B,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,gJAAF,CAA5B;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AAEAC,QAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCH,IAAvC;;AAEA,YAAIA,IAAI,IAAIA,IAAI,CAACI,KAAjB,EAAwB;AACpB/B,UAAAA,SAAS,CAAC;AAAEC,YAAAA,MAAM,EAAE0B,IAAI,CAACI,KAAL,CAAW9B,MAArB;AAA6BC,YAAAA,OAAO,EAAEyB,IAAI,CAACI,KAAL,CAAW7B;AAAjD,WAAD,CAAT;;AACA,cAAIyB,IAAI,CAACK,IAAT,EAAe;AACX5B,YAAAA,QAAQ,CAAC;AAAEH,cAAAA,MAAM,EAAE0B,IAAI,CAACK,IAAL,CAAU/B,MAApB;AAA4BC,cAAAA,OAAO,EAAEyB,IAAI,CAACK,IAAL,CAAU9B;AAA/C,aAAD,CAAR;AACH;AACJ;AACJ,OAZD,CAYE,OAAO+B,KAAP,EAAc;AACZJ,QAAAA,OAAO,CAACI,KAAR,CAAc,kCAAd,EAAkDA,KAAlD;AACH;AACJ,KAhBD;;AAqBAT,IAAAA,SAAS;AAETU,IAAAA,OAAO,CAACC,GAAR,CAAY,CACRD,OAAO,CAACC,GAAR,CAAY,CACRC,eAAe,CAAC,QAAD,CADP,EAERA,eAAe,CAAC,SAAD,CAAf,CAA2BC,IAA3B,CAAgCV,IAAI,IAAI;AACpC,YAAMW,iBAAiB,GAAGC,MAAM,CAACC,OAAP,CAAeb,IAAI,CAACA,IAAL,CAAUI,KAAV,IAAmB,EAAlC,EAAsCU,MAAtC,CAA6C,CAAC,GAAGV,KAAH,CAAD,KAAeA,KAAK,CAAC7B,OAAN,KAAkBwC,SAA9E,CAA1B;;AACA,UAAIJ,iBAAiB,CAACK,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,eAAOP,eAAe,CAAC,KAAD,CAAtB,CAD8B,CACC;AAClC;AACJ,KALD,CAFQ,CAAZ,CADQ,CAAZ,EAUGC,IAVH,CAUQ,MAAM;AACVR,MAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CzB,eAA3C;AACAwB,MAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CvB,gBAA5C;AACAG,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAdD;AAeH,GAvCQ,EAuCN,EAvCM,CAAT;AAyCAjB,EAAAA,SAAS,CAAC,MAAM;AACZoC,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDzB,eAAnD;AACAwB,IAAAA,OAAO,CAACC,GAAR,CAAY,sCAAZ,EAAoDvB,gBAApD;AACH,GAHQ,EAGN,CAACF,eAAD,EAAkBE,gBAAlB,CAHM,CAAT;;AAKA,MAAIE,OAAJ,EAAa;AACT,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACH;;AAED,QAAMmC,kBAAkB,GAAG,MAAMf,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CzB,eAA5C,CAAjC;;AACA,QAAMwC,mBAAmB,GAAG,MAAMhB,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA6CvB,gBAA7C,CAAlC;;AAEAqC,EAAAA,kBAAkB;AAClBC,EAAAA,mBAAmB;AAEnB,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEzB,MAAAA,OAAO,EAAE,MAAX;AAAmBG,MAAAA,cAAc,EAAE;AAAnC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,KAAK,EAAEZ,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGKZ,MAAM,CAACE,MAAP,IAAiB,CAAC,IAAIF,MAAM,CAACE,MAAZ,EAAoB6C,OAApB,CAA4B,CAA5B,CAHtB,OAGuD3C,KAAK,CAACF,MAH7D,eAII,oBAAC,mBAAD;AAAqB,IAAA,KAAK,EAAC,MAA3B;AAAkC,IAAA,MAAM,EAAE,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE,GAAlB;AAAuB,IAAA,MAAM,EAAE,EAA/B;AAAoC,IAAA,GAAG,EAAE,KAAzC;AAAgD,IAAA,IAAI,EAAEI,eAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAC,MAA9B;AAAqC,IAAA,MAAM,EAAC,SAA5C;AAAsD,IAAA,WAAW,EAAE,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CAJJ,CADJ,eAWI;AAAK,IAAA,KAAK,EAAEM,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAGKZ,MAAM,CAACG,OAAP,IAAkB,CAAC,IAAIH,MAAM,CAACG,OAAZ,EAAqB4C,OAArB,CAA6B,CAA7B,CAHvB,OAGyD3C,KAAK,CAACD,OAH/D,eAII,oBAAC,mBAAD;AAAqB,IAAA,KAAK,EAAC,MAA3B;AAAkC,IAAA,MAAM,EAAE,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE,GAAlB;AAAuB,IAAA,MAAM,EAAE,EAA/B;AAAmC,IAAA,IAAI,EAAEK,gBAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAC,UAAX;AAAsB,IAAA,OAAO,EAAC,MAA9B;AAAqC,IAAA,MAAM,EAAC,SAA5C;AAAsD,IAAA,WAAW,EAAE,CAAnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CAJJ,CAXJ,CADJ;AAwBH,CAtGD;;AAwGA,eAAeT,iBAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { LineChart, Line, ResponsiveContainer } from 'recharts';\n\nconst CommoditiesPrices = () => {\n    const [prices, setPrices] = useState({ COFFEE: null, ROBUSTA: null });\n    const [units, setUnits] = useState({ COFFEE: null, ROBUSTA: null });\n    const [coffeeChartData, setCoffeeChartData] = useState([]);\n    const [robustaChartData, setRobustaChartData] = useState([]);\n    const [loading, setLoading] = useState(true);\n\n    const divStyle = {\n        padding: '20px',\n        margin: '10px',\n        width: '200px',\n        background: 'rgba(0,255,133,0.35)',\n        boxShadow: '20px 20px 40px -6px rgba(0,0,0,0.2)',\n        backdropFilter: 'blur(10.5px)',\n        WebkitBackdropFilter: 'blur(10.5px)',\n        borderRadius: '10px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n    };\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch(`https://commodities-api.com/api/latest?access_key=nc4rq9ho37s9r4m7r7bd4jaw46b940amnq40h71wcj54cbfweprfm113awf4&base=USD&symbols=COFFEE,ROBUSTA`);\n                const { data } = await response.json();\n\n                console.log(\"Latest Prices Response:\", data);\n\n                if (data && data.rates) {\n                    setPrices({ COFFEE: data.rates.COFFEE, ROBUSTA: data.rates.ROBUSTA });\n                    if (data.unit) {\n                        setUnits({ COFFEE: data.unit.COFFEE, ROBUSTA: data.unit.ROBUSTA });\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error fetching commodities data:\", error);\n            }\n        };\n\n        \n        \n\n        fetchData();\n\n        Promise.all([\n            Promise.all([\n                fetchTimeSeries('COFFEE'),\n                fetchTimeSeries('ROBUSTA').then(data => {\n                    const robustaDataPoints = Object.entries(data.data.rates || {}).filter(([, rates]) => rates.ROBUSTA !== undefined);\n                    if (robustaDataPoints.length < 2) {\n                        return fetchTimeSeries('D00'); // Fallback for ROBUSTA\n                    }\n                })\n            ])\n        ]).then(() => {\n            console.log(\"Chart Data State (Coffee): \", coffeeChartData);\n            console.log(\"Chart Data State (Robusta): \", robustaChartData);\n            setLoading(false);\n        });\n    }, []);\n\n    useEffect(() => {\n        console.log(\"Updated Chart Data State (Coffee): \", coffeeChartData);\n        console.log(\"Updated Chart Data State (Robusta): \", robustaChartData);\n    }, [coffeeChartData, robustaChartData]);\n    \n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    const logCoffeeChartData = () => console.log(\"Props data for COFFEE chart:\", coffeeChartData);\n    const logRobustaChartData = () => console.log(\"Props data for ROBUSTA chart:\", robustaChartData);\n    \n    logCoffeeChartData();\n    logRobustaChartData();\n    \n    return (\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <div style={divStyle}>\n                Latest Price ARABICA: \n                <br />\n                {prices.COFFEE && (1 / prices.COFFEE).toFixed(2)} {units.COFFEE}\n                <ResponsiveContainer width=\"100%\" height={80}>\n                    <LineChart width={300} height={80}  dot={false} data={coffeeChartData}>\n                        <Line type=\"monotone\" dataKey=\"rate\" stroke=\"#8884d8\" strokeWidth={2} />\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n            <div style={divStyle}>\n                Latest Price ROBUSTA: \n                <br />\n                {prices.ROBUSTA && (1 / prices.ROBUSTA).toFixed(2)} {units.ROBUSTA}\n                <ResponsiveContainer width=\"100%\" height={80}>\n                    <LineChart width={300} height={80} data={robustaChartData}>\n                        <Line type=\"monotone\" dataKey=\"rate\" stroke=\"#82ca9d\" strokeWidth={2} />\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n        </div>\n    );\n};\n\nexport default CommoditiesPrices;"]},"metadata":{},"sourceType":"module"}
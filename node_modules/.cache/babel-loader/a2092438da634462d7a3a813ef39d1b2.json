{"ast":null,"code":"var _jsxFileName = \"/workspaces/Glocafe1/src/components/Home/CoffeePrices.js\";\nimport React, { useEffect, useState } from 'react';\nimport { LineChart, Line, ResponsiveContainer } from 'recharts';\n\nconst CommoditiesPrices = () => {\n  const [prices, setPrices] = useState({\n    COFFEE: null,\n    ROBUSTA: null\n  });\n  const [units, setUnits] = useState({\n    COFFEE: null,\n    ROBUSTA: null\n  });\n  const [coffeeChartData, setCoffeeChartData] = useState([]);\n  const [robustaChartData, setRobustaChartData] = useState([]);\n  const [loading, setLoading] = useState(true); // Add a loading state\n\n  const divStyle = {\n    padding: '20px',\n    margin: '10px',\n    width: '200px',\n    background: 'rgba(0,255,133,0.35)',\n    boxShadow: '20px 20px 40px -6px rgba(0,0,0,0.2)',\n    backdropFilter: 'blur(10.5px)',\n    WebkitBackdropFilter: 'blur(10.5px)',\n    borderRadius: '10px',\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    justifyContent: 'center'\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`https://commodities-api.com/api/latest?access_key=YOUR_API_KEY&base=USD&symbols=COFFEE,ROBUSTA`);\n        const {\n          data\n        } = await response.json();\n        console.log(\"Latest Prices Response:\", data);\n\n        if (data && data.rates) {\n          const coffeePrice = data.rates.COFFEE;\n          const robustaPrice = data.rates.ROBUSTA;\n          setPrices({\n            COFFEE: coffeePrice,\n            ROBUSTA: robustaPrice\n          });\n\n          if (data.unit) {\n            setUnits({\n              COFFEE: data.unit.COFFEE,\n              ROBUSTA: data.unit.ROBUSTA\n            });\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching commodities data:\", error);\n      }\n    };\n\n    const fetchTimeSeries = async symbol => {\n      const currentDate = new Date();\n      const endDate = new Date(currentDate.setDate(currentDate.getDate() - 1)).toISOString().split('T')[0];\n      const startDate = new Date(currentDate.setDate(currentDate.getDate() - 20)).toISOString().split('T')[0];\n      const response = await fetch(`https://commodities-api.com/api/timeseries?access_key=YOUR_API_KEY&start_date=${startDate}&end_date=${endDate}&symbols=${symbol}`);\n      const data = await response.json();\n      console.log(`Raw API Response for ${symbol}:`, data);\n\n      if (data && data.rates) {\n        const transformedData = Object.entries(data.rates).map(([date, rates]) => ({\n          date,\n          rate: rates[symbol] ? 1 / rates[symbol] : null\n        })).filter(item => item.rate !== null);\n\n        if (symbol === 'COFFEE') {\n          setCoffeeChartData(transformedData);\n          console.log(\"Data being passed to the Coffee chart: \", transformedData);\n        } else {\n          setRobustaChartData(transformedData);\n          console.log(\"Data being passed to the Robusta chart: \", transformedData);\n        }\n      }\n    };\n\n    fetchData();\n    Promise.all([fetchTimeSeries('COFFEE'), fetchTimeSeries('ROBUSTA')]).then(() => setLoading(false));\n  }, []);\n  useEffect(() => {\n    console.log(\"Chart Data State (Coffee): \", coffeeChartData);\n    console.log(\"Chart Data State (Robusta): \", robustaChartData);\n  }, [coffeeChartData, robustaChartData]);\n\n  if (loading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 16\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  }, \"Latest Price ARABICA:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }), prices.COFFEE && (1 / prices.COFFEE).toFixed(2), \" \", units.COFFEE, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 80,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    width: 300,\n    height: 80,\n    data: coffeeChartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"rate\",\n    stroke: \"#8884d8\",\n    strokeWidth: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 25\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    style: divStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, \"Latest Price ROBUSTA:\", /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }\n  }), prices.ROBUSTA && (1 / prices.ROBUSTA).toFixed(2), \" \", units.ROBUSTA, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 80,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(LineChart, {\n    width: 300,\n    height: 80,\n    data: robustaChartData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"rate\",\n    stroke: \"#82ca9d\",\n    strokeWidth: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default CommoditiesPrices;","map":{"version":3,"sources":["/workspaces/Glocafe1/src/components/Home/CoffeePrices.js"],"names":["React","useEffect","useState","LineChart","Line","ResponsiveContainer","CommoditiesPrices","prices","setPrices","COFFEE","ROBUSTA","units","setUnits","coffeeChartData","setCoffeeChartData","robustaChartData","setRobustaChartData","loading","setLoading","divStyle","padding","margin","width","background","boxShadow","backdropFilter","WebkitBackdropFilter","borderRadius","display","flexDirection","alignItems","justifyContent","fetchData","response","fetch","data","json","console","log","rates","coffeePrice","robustaPrice","unit","error","fetchTimeSeries","symbol","currentDate","Date","endDate","setDate","getDate","toISOString","split","startDate","transformedData","Object","entries","map","date","rate","filter","item","Promise","all","then","toFixed"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { LineChart, Line, ResponsiveContainer } from 'recharts';\n\nconst CommoditiesPrices = () => {\n    const [prices, setPrices] = useState({ COFFEE: null, ROBUSTA: null });\n    const [units, setUnits] = useState({ COFFEE: null, ROBUSTA: null });\n    const [coffeeChartData, setCoffeeChartData] = useState([]);\n    const [robustaChartData, setRobustaChartData] = useState([]);\n    const [loading, setLoading] = useState(true); // Add a loading state\n\n    const divStyle = {\n        padding: '20px',\n        margin: '10px',\n        width: '200px',\n        background: 'rgba(0,255,133,0.35)',\n        boxShadow: '20px 20px 40px -6px rgba(0,0,0,0.2)',\n        backdropFilter: 'blur(10.5px)',\n        WebkitBackdropFilter: 'blur(10.5px)',\n        borderRadius: '10px',\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n        justifyContent: 'center'\n    };\n\n\n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n                const response = await fetch(`https://commodities-api.com/api/latest?access_key=YOUR_API_KEY&base=USD&symbols=COFFEE,ROBUSTA`);\n                const { data } = await response.json();\n\n                console.log(\"Latest Prices Response:\", data);\n\n                if (data && data.rates) {\n                    const coffeePrice = data.rates.COFFEE;\n                    const robustaPrice = data.rates.ROBUSTA;\n                    setPrices({ COFFEE: coffeePrice, ROBUSTA: robustaPrice });\n\n                    if (data.unit) {\n                        setUnits({ COFFEE: data.unit.COFFEE, ROBUSTA: data.unit.ROBUSTA });\n                    }\n                }\n            } catch (error) {\n                console.error(\"Error fetching commodities data:\", error);\n            }\n        };\n\n        const fetchTimeSeries = async (symbol) => {\n            const currentDate = new Date();\n            const endDate = new Date(currentDate.setDate(currentDate.getDate() - 1)).toISOString().split('T')[0];\n            const startDate = new Date(currentDate.setDate(currentDate.getDate() - 20)).toISOString().split('T')[0];\n\n            const response = await fetch(`https://commodities-api.com/api/timeseries?access_key=YOUR_API_KEY&start_date=${startDate}&end_date=${endDate}&symbols=${symbol}`);\n            const data = await response.json();\n\n            console.log(`Raw API Response for ${symbol}:`, data);\n\n            if (data && data.rates) {\n                const transformedData = Object.entries(data.rates).map(([date, rates]) => ({\n                    date,\n                    rate: rates[symbol] ? 1 / rates[symbol] : null\n                })).filter(item => item.rate !== null);\n\n                if (symbol === 'COFFEE') {\n                    setCoffeeChartData(transformedData);\n                    console.log(\"Data being passed to the Coffee chart: \", transformedData);\n                } else {\n                    setRobustaChartData(transformedData);\n                    console.log(\"Data being passed to the Robusta chart: \", transformedData);\n                }\n            }\n        };\n\n        fetchData();\n\n        Promise.all([\n            fetchTimeSeries('COFFEE'),\n            fetchTimeSeries('ROBUSTA')\n        ]).then(() => setLoading(false));\n    }, []);\n\n    useEffect(() => {\n        console.log(\"Chart Data State (Coffee): \", coffeeChartData);\n        console.log(\"Chart Data State (Robusta): \", robustaChartData);\n    }, [coffeeChartData, robustaChartData]);\n\n    if (loading) {\n        return <div>Loading...</div>;\n    }\n\n    return (\n        <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <div style={divStyle}>\n                Latest Price ARABICA: \n                <br />\n                {prices.COFFEE && (1 / prices.COFFEE).toFixed(2)} {units.COFFEE}\n                <ResponsiveContainer width=\"100%\" height={80}>\n                    <LineChart width={300} height={80} data={coffeeChartData}>\n                        <Line type=\"monotone\" dataKey=\"rate\" stroke=\"#8884d8\" strokeWidth={2} />\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n            <div style={divStyle}>\n                Latest Price ROBUSTA: \n                <br />\n                {prices.ROBUSTA && (1 / prices.ROBUSTA).toFixed(2)} {units.ROBUSTA}\n                <ResponsiveContainer width=\"100%\" height={80}>\n                    <LineChart width={300} height={80} data={robustaChartData}>\n                        <Line type=\"monotone\" dataKey=\"rate\" stroke=\"#82ca9d\" strokeWidth={2} />\n                    </LineChart>\n                </ResponsiveContainer>\n            </div>\n        </div>\n    );\n};\n\nexport default CommoditiesPrices;\n"]},"metadata":{},"sourceType":"module"}